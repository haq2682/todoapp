{"version":3,"sources":["Todo.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todos","deleteTodo","todosList","map","todo","key","id","className","onClick","AddTodo","props","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addTodo","bind","name","this","onChange","htmlFor","label","icon","iconPos","type","Component","App","Math","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAgBeA,G,MAdF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACZC,EAAYF,EAAMG,KAAI,SAAAC,GACxB,OACI,yBAAKC,IAAKD,EAAKE,IACX,wBAAIC,UAAU,0CAAd,aAA6DH,EAAKA,KAAK,uBAAGI,QAAS,WAAKP,EAAWG,EAAKE,KAAMC,UAAU,KAAjD,UAInF,OACI,yBAAKA,UAAU,cACX,6BAAML,M,oCC+BHO,G,wDA/BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IALVC,MAAQ,CACJL,GAAI,KACJF,KAAM,MAES,EAKnBQ,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVV,KAAMS,EAAEE,OAAOC,SAPJ,EAUnBC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKR,MAAMS,QAAQ,EAAKR,OACxB,EAAKG,SAAS,CACVV,KAAM,MAZV,EAAKa,aAAe,EAAKA,aAAaG,KAAlB,gBACpB,EAAKR,aAAe,EAAKA,aAAaQ,KAAlB,gBAHL,E,qDAkBf,OACI,6BACI,8BACI,0BAAMb,UAAU,iBACZ,kBAAC,YAAD,CAAWD,GAAG,WAAWe,KAAK,OAAOL,MAAOM,KAAKX,MAAMP,KAAMmB,SAAUD,KAAKV,eAC5E,2BAAOY,QAAQ,YAAf,aAEJ,yBAAKlB,GAAG,WAAU,kBAAC,SAAD,CAAQmB,MAAM,SAASlB,UAAU,cAAcmB,KAAK,cAAcC,QAAQ,QAAQC,KAAK,SAASpB,QAASc,KAAKL,sB,GA9B9HY,cC6BPC,E,kDA7Bb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAJRC,MAAQ,CACNX,MAAO,IAEU,EAInBmB,QAAU,SAACf,GACTA,EAAKE,GAAKyB,KAAKC,SACf,IAAIhC,EAAK,sBAAO,EAAKW,MAAMX,OAAlB,CAAyBI,IAClC,EAAKU,SAAS,CACZd,MAAOA,KARQ,EAWnBC,WAAa,SAACK,GACZ,IAAMN,EAAQ,EAAKW,MAAMX,MAAMiC,QAAO,SAAA7B,GACpC,OAAOA,EAAKE,KAAOA,KAErB,EAAKQ,SAAS,CACZd,MAAOA,KAdT,EAAKmB,QAAU,EAAKA,QAAQC,KAAb,gBAFE,E,qDAoBjB,OACE,yBAAKb,UAAU,OACb,wBAAIA,UAAU,gBAAd,YACA,kBAAC,EAAD,CAASY,QAASG,KAAKH,UACvB,kBAAC,EAAD,CAAMnB,MAAOsB,KAAKX,MAAMX,MAAOC,WAAYqB,KAAKrB,kB,GA5BtC4B,aCSEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b93840d.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'primeflex/primeflex.css';\r\nconst Todo = ({todos, deleteTodo}) => {\r\n    const todosList = todos.map(todo => {\r\n        return(\r\n            <div key={todo.id}>\r\n                <h3 className=\"list-group-item list-group-item-action\">â€¢    {todo.todo}<a onClick={()=>{deleteTodo(todo.id)}} className=\"X\">x</a></h3>\r\n            </div>\r\n        )\r\n    })\r\n    return(\r\n        <div className=\"list-group\">\r\n            <div>{todosList}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Todo;","import React, {Component} from 'react';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primereact/resources/themes/md-dark-deeppurple/theme.css';\r\nimport { Button } from 'primereact/button';\r\nimport './ButtonDemo.scss';\r\nclass AddTodo extends Component {\r\n    state = {\r\n        id: null,\r\n        todo: null\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            todo: ''\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form>\r\n                    <span className=\"p-float-label\">\r\n                        <InputText id=\"username\" name=\"todo\" value={this.state.todo} onChange={this.handleChange}/>\r\n                        <label htmlFor=\"username\">Add Todo</label>\r\n                    </span>\r\n                    <div id=\"button1\"><Button label=\"Submit\" className=\"p-button-lg\" icon=\"pi pi-check\" iconPos=\"right\" type=\"submit\" onClick={this.handleSubmit} /></div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddTodo;","import React, {Component} from 'react';\nimport Todo from './Todo';\nimport AddTodo from './AddTodo';\nclass App extends Component {\n  state = {\n    todos: []\n  }\n  constructor(props) {\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n}\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo]\n    this.setState({\n      todos: todos\n    })\n  }\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos: todos\n    })\n  }\n  render() {\n    return(\n      <div className=\"App\">\n        <h1 className=\"todo-heading\">Todo App</h1>\n        <AddTodo addTodo={this.addTodo}/>\n        <Todo todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}